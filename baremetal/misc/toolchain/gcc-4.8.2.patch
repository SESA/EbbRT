diff -rupN gcc-4.8.2/config/gthr.m4 gcc-4.8.2-patched/config/gthr.m4
--- gcc-4.8.2/config/gthr.m4	2012-10-15 09:10:30.000000000 -0400
+++ gcc-4.8.2-patched/config/gthr.m4	2013-12-11 20:32:47.944900488 -0500
@@ -13,6 +13,7 @@ AC_DEFUN([GCC_AC_THREAD_HEADER],
 case $1 in
     aix)	thread_header=config/rs6000/gthr-aix.h ;;
     dce)	thread_header=config/pa/gthr-dce.h ;;
+    ebbrt)	thread_header=config/gthr-ebbrt.h ;;
     lynx)	thread_header=config/gthr-lynx.h ;;
     mipssde)	thread_header=config/mips/gthr-mipssde.h ;;
     posix)	thread_header=gthr-posix.h ;;
diff -rupN gcc-4.8.2/config.sub gcc-4.8.2-patched/config.sub
--- gcc-4.8.2/config.sub	2013-01-11 08:02:58.000000000 -0500
+++ gcc-4.8.2-patched/config.sub	2013-12-11 20:32:47.948900488 -0500
@@ -1359,6 +1359,7 @@ case $os in
 	      | -sym* | -kopensolaris* | -plan9* \
 	      | -amigaos* | -amigados* | -msdos* | -newsos* | -unicos* | -aof* \
 	      | -aos* | -aros* \
+	      | -ebbrt* \
 	      | -nindy* | -vxsim* | -vxworks* | -ebmon* | -hms* | -mvs* \
 	      | -clix* | -riscos* | -uniplus* | -iris* | -rtu* | -xenix* \
 	      | -hiux* | -386bsd* | -knetbsd* | -mirbsd* | -netbsd* \
diff -rupN gcc-4.8.2/gcc/config/ebbrt.h gcc-4.8.2-patched/gcc/config/ebbrt.h
--- gcc-4.8.2/gcc/config/ebbrt.h	1969-12-31 19:00:00.000000000 -0500
+++ gcc-4.8.2-patched/gcc/config/ebbrt.h	2013-12-11 20:32:47.948900488 -0500
@@ -0,0 +1,14 @@
+#undef TARGET_OS_CPP_BUILTINS
+#define TARGET_OS_CPP_BUILTINS()                \
+  do {                                          \
+    builtin_define_std ("ebbrt");               \
+    builtin_define_std ("unix");                \
+    builtin_assert ("system=ebbrt");            \
+    builtin_assert ("system=unix");             \
+  } while (0);
+
+#undef STARTFILE_SPEC
+#define STARTFILE_SPEC ""
+
+#undef ENDFILE_SPEC
+#define ENDFILE_SPEC ""
diff -rupN gcc-4.8.2/gcc/config.gcc gcc-4.8.2-patched/gcc/config.gcc
--- gcc-4.8.2/gcc/config.gcc	2013-10-02 20:47:24.000000000 -0400
+++ gcc-4.8.2-patched/gcc/config.gcc	2013-12-11 20:32:47.952900488 -0500
@@ -807,6 +807,12 @@ case ${target} in
     *) echo 'Unknown thread configuration for VxWorks'; exit 1 ;;
   esac
   ;;
+*-*-ebbrt*)
+  extra_parts="crtbegin.o crtend.o"
+  gas=yes
+  gnu_ld=yes
+  default_use_cxa_atexit=yes
+  ;;
 *-*-elf)
   # Assume that newlib is being used and so __cxa_atexit is provided.
   default_use_cxa_atexit=yes
@@ -1198,6 +1204,11 @@ hppa[12]*-*-hpux11*)
 		dwarf2=no
 	fi
 	;;
+x86_64-*-ebbrt*)
+	tm_file="${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h i386/i386elf.h i386/x86-64.h ebbrt.h"
+	tmake_file="${tmake_file} i386/t-i386elf t-svr4"
+	use_fixproto=yes
+	;;
 i[34567]86-*-darwin*)
 	need_64bit_isa=yes
 	# Baseline choice for a machine that allows m64 support.
diff -rupN gcc-4.8.2/gcc/configure.ac gcc-4.8.2-patched/gcc/configure.ac
--- gcc-4.8.2/gcc/configure.ac	2013-06-18 21:18:38.000000000 -0400
+++ gcc-4.8.2-patched/gcc/configure.ac	2013-12-11 20:32:47.952900488 -0500
@@ -1425,7 +1425,7 @@ case ${enable_threads} in
     # default
     target_thread_file='single'
     ;;
-  aix | dce | lynx | mipssde | posix | rtems | \
+  aix | dce | ebbrt | lynx | mipssde | posix | rtems | \
   single | tpf | vxworks | win32)
     target_thread_file=${enable_threads}
     ;;
diff -rupN gcc-4.8.2/libgcc/config/gthr-ebbrt.h gcc-4.8.2-patched/libgcc/config/gthr-ebbrt.h
--- gcc-4.8.2/libgcc/config/gthr-ebbrt.h	1969-12-31 19:00:00.000000000 -0500
+++ gcc-4.8.2-patched/libgcc/config/gthr-ebbrt.h	2013-12-11 20:32:47.952900488 -0500
@@ -0,0 +1,193 @@
+#ifndef GCC_GTHR_EBBRT_H
+#define GCC_GTHR_EBBRT_H
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+#define __GTHREADS 1
+#define __GTHREAD_HAS_COND 1
+#define __GTHREADS_CXX0X 1
+
+typedef void *__gthread_key_t;
+typedef void *__gthread_once_t;
+typedef void *__gthread_mutex_t;
+typedef void *__gthread_recursive_mutex_t;
+typedef void *__gthread_cond_t;
+typedef void *__gthread_t;
+typedef void *__gthread_time_t;
+
+#define __GTHREAD_ONCE_INIT 0
+#define __GTHREAD_MUTEX_INIT_FUNCTION ebbrt_gthread_mutex_init
+#define __GTHREAD_RECURSIVE_MUTEX_INIT_FUNCTION                                \
+  ebbrt_gthread_recursive_mutex_init
+  //#define __GTHREAD_COND_INIT 0
+#define __GTHREAD_COND_INIT_FUNCTION ebbrt_gthread_cond_init
+
+extern void ebbrt_gthread_mutex_init(__gthread_mutex_t *);
+extern void ebbrt_gthread_recursive_mutex_init(__gthread_recursive_mutex_t *);
+extern int ebbrt_gthread_active_p(void);
+extern int ebbrt_gthread_once(__gthread_once_t *, void (*func)(void));
+extern int ebbrt_gthread_key_create(__gthread_key_t *keyp,
+                                    void (*dtor)(void *));
+extern int ebbrt_gthread_key_delete(__gthread_key_t key);
+extern void *ebbrt_gthread_getspecific(__gthread_key_t key);
+extern int ebbrt_gthread_setspecific(__gthread_key_t key, const void *ptr);
+extern int ebbrt_gthread_mutex_destroy(__gthread_mutex_t *mutex);
+extern int
+ebbrt_gthread_recursive_mutex_destroy(__gthread_recursive_mutex_t *mutex);
+extern int ebbrt_gthread_mutex_lock(__gthread_mutex_t *mutex);
+extern int ebbrt_gthread_mutex_trylock(__gthread_mutex_t *mutex);
+extern int ebbrt_gthread_mutex_unlock(__gthread_mutex_t *mutex);
+extern int
+ebbrt_gthread_recursive_mutex_lock(__gthread_recursive_mutex_t *mutex);
+extern int
+ebbrt_gthread_recursive_mutex_trylock(__gthread_recursive_mutex_t *mutex);
+extern int
+ebbrt_gthread_recursive_mutex_unlock(__gthread_recursive_mutex_t *mutex);
+extern void ebbrt_gthread_cond_init(__gthread_cond_t *);
+extern int ebbrt_gthread_cond_broadcast(__gthread_cond_t *cond);
+extern int ebbrt_gthread_cond_wait(__gthread_cond_t *cond,
+                                   __gthread_mutex_t *mutex);
+extern int ebbrt_gthread_cond_wait_recursive(__gthread_cond_t *,
+                                             __gthread_recursive_mutex_t *);
+extern int ebbrt_gthread_cond_destroy(__gthread_cond_t* cond);
+extern int ebbrt_gthread_create(__gthread_t *thread, void *(*func)(void *),
+                                void *args);
+extern int ebbrt_gthread_join(__gthread_t thread, void **value_ptr);
+extern int ebbrt_gthread_detach(__gthread_t thread);
+extern int ebbrt_gthread_equal(__gthread_t t1, __gthread_t t2);
+extern __gthread_t ebbrt_gthread_self(void);
+extern int ebbrt_gthread_yield(void);
+extern int ebbrt_gthread_mutex_timedlock(__gthread_mutex_t *m,
+                                         const __gthread_time_t *abs_timeout);
+extern int
+ebbrt_gthread_recursive_mutex_timedlock(__gthread_recursive_mutex_t *m,
+                                        const __gthread_time_t *abs_time);
+extern int ebbrt_gthread_cond_signal(__gthread_cond_t *cond);
+extern int ebbrt_gthread_cond_timedwait(__gthread_cond_t *cond,
+                                        __gthread_mutex_t *mutex,
+                                        const __gthread_time_t *abs_timeout);
+
+static inline int __gthread_active_p(void) { return ebbrt_gthread_active_p(); }
+
+static inline int __gthread_once(__gthread_once_t *once, void (*func)(void)) {
+  return ebbrt_gthread_once(once, func);
+}
+
+static inline int __gthread_key_create(__gthread_key_t *keyp,
+                                       void (*dtor)(void *)) {
+  return ebbrt_gthread_key_create(keyp, dtor);
+}
+
+static inline int __gthread_key_delete(__gthread_key_t key) {
+  return ebbrt_gthread_key_delete(key);
+}
+
+static inline void *__gthread_getspecific(__gthread_key_t key) {
+  return ebbrt_gthread_getspecific(key);
+}
+
+static inline int __gthread_setspecific(__gthread_key_t key, const void *ptr) {
+  return ebbrt_gthread_setspecific(key, ptr);
+}
+
+static inline int __gthread_mutex_destroy(__gthread_mutex_t *mutex) {
+  return ebbrt_gthread_mutex_destroy(mutex);
+}
+
+static inline int
+__gthread_recursive_mutex_destroy(__gthread_recursive_mutex_t *mutex) {
+  return ebbrt_gthread_recursive_mutex_destroy(mutex);
+}
+
+static inline int __gthread_mutex_lock(__gthread_mutex_t *mutex) {
+  return ebbrt_gthread_mutex_lock(mutex);
+}
+
+static inline int __gthread_mutex_trylock(__gthread_mutex_t *mutex) {
+  return ebbrt_gthread_mutex_trylock(mutex);
+}
+
+static inline int __gthread_mutex_unlock(__gthread_mutex_t *mutex) {
+  return ebbrt_gthread_mutex_unlock(mutex);
+}
+
+static inline int
+__gthread_recursive_mutex_lock(__gthread_recursive_mutex_t *mutex) {
+  return ebbrt_gthread_recursive_mutex_lock(mutex);
+}
+
+static inline int
+__gthread_recursive_mutex_trylock(__gthread_recursive_mutex_t *mutex) {
+  return ebbrt_gthread_recursive_mutex_trylock(mutex);
+}
+
+static inline int
+__gthread_recursive_mutex_unlock(__gthread_recursive_mutex_t *mutex) {
+  return ebbrt_gthread_recursive_mutex_unlock(mutex);
+}
+
+static inline int __gthread_cond_broadcast(__gthread_cond_t *cond) {
+  return ebbrt_gthread_cond_broadcast(cond);
+}
+static inline int __gthread_cond_wait(__gthread_cond_t *cond,
+                                      __gthread_mutex_t *mutex) {
+  return ebbrt_gthread_cond_wait(cond, mutex);
+}
+static inline int
+__gthread_cond_wait_recursive(__gthread_cond_t *cond,
+                              __gthread_recursive_mutex_t *mutex) {
+  return ebbrt_gthread_cond_wait_recursive(cond, mutex);
+}
+
+static inline int __gthread_cond_destroy(__gthread_cond_t* cond) {
+  return ebbrt_gthread_cond_destroy(cond);
+}
+
+static inline int __gthread_create(__gthread_t *thread, void *(*func)(void *),
+                                   void *args) {
+  return ebbrt_gthread_create(thread, func, args);
+}
+
+static inline int __gthread_join(__gthread_t thread, void **value_ptr) {
+  return ebbrt_gthread_join(thread, value_ptr);
+}
+
+static inline int __gthread_detach(__gthread_t thread) {
+  return ebbrt_gthread_detach(thread);
+}
+
+static inline int __gthread_equal(__gthread_t t1, __gthread_t t2) {
+  return ebbrt_gthread_equal(t1, t2);
+}
+
+static inline __gthread_t __gthread_self(void) { return ebbrt_gthread_self(); }
+
+static inline int __gthread_yield(void) { return ebbrt_gthread_yield(); }
+
+static inline int
+__gthread_mutex_timedlock(__gthread_mutex_t *m,
+                          const __gthread_time_t *abs_timeout) {
+  return ebbrt_gthread_mutex_timedlock(m, abs_timeout);
+}
+
+static inline int
+__gthread_recursive_mutex_timedlock(__gthread_recursive_mutex_t *m,
+                                    const __gthread_time_t *abs_time) {
+  return ebbrt_gthread_mutex_timedlock(m, abs_time);
+}
+
+static inline int __gthread_cond_signal(__gthread_cond_t *cond) {
+  return ebbrt_gthread_cond_signal(cond);
+}
+
+static inline int
+__gthread_cond_timedwait(__gthread_cond_t *cond, __gthread_mutex_t *mutex,
+                         const __gthread_time_t *abs_timeout) {
+  return ebbrt_gthread_cond_timedwait(cond, mutex, abs_timeout);
+}
+
+#ifdef __cplusplus
+}
+#endif
+#endif
diff -rupN gcc-4.8.2/libgcc/config.host gcc-4.8.2-patched/libgcc/config.host
--- gcc-4.8.2/libgcc/config.host	2013-07-09 17:35:57.000000000 -0400
+++ gcc-4.8.2-patched/libgcc/config.host	2013-12-11 20:32:47.956900488 -0500
@@ -1090,6 +1090,9 @@ vax-*-netbsdelf*)
 	;;
 vax-*-openbsd*)
 	;;
+x86_64-*-ebbrt*)
+	extra_parts="crtbegin.o crtend.o"
+	;;
 xstormy16-*-elf)
 	tmake_file="stormy16/t-stormy16 t-fdpbit"
 	;;
diff -rupN gcc-4.8.2/libgcc/configure gcc-4.8.2-patched/libgcc/configure
--- gcc-4.8.2/libgcc/configure	2012-11-04 18:08:42.000000000 -0500
+++ gcc-4.8.2-patched/libgcc/configure	2013-12-11 20:32:47.968900488 -0500
@@ -4509,6 +4509,7 @@ tm_file="${tm_file_}"
 case $target_thread_file in
     aix)	thread_header=config/rs6000/gthr-aix.h ;;
     dce)	thread_header=config/pa/gthr-dce.h ;;
+    ebbrt)	thread_header=config/gthr-ebbrt.h ;;
     lynx)	thread_header=config/gthr-lynx.h ;;
     mipssde)	thread_header=config/mips/gthr-mipssde.h ;;
     posix)	thread_header=gthr-posix.h ;;
diff -rupN gcc-4.8.2/libstdc++-v3/configure gcc-4.8.2-patched/libstdc++-v3/configure
--- gcc-4.8.2/libstdc++-v3/configure	2013-05-24 14:10:37.000000000 -0400
+++ gcc-4.8.2-patched/libstdc++-v3/configure	2013-12-11 20:34:55.548896598 -0500
@@ -15164,6 +15164,7 @@ $as_echo "$target_thread_file" >&6; }
 case $target_thread_file in
     aix)	thread_header=config/rs6000/gthr-aix.h ;;
     dce)	thread_header=config/pa/gthr-dce.h ;;
+    ebbrt)      thread_header=config/gthr-ebbrt.h ;;
     lynx)	thread_header=config/gthr-lynx.h ;;
     mipssde)	thread_header=config/mips/gthr-mipssde.h ;;
     posix)	thread_header=gthr-posix.h ;;
diff -rupN gcc-4.8.2/libstdc++-v3/crossconfig.m4 gcc-4.8.2-patched/libstdc++-v3/crossconfig.m4
--- gcc-4.8.2/libstdc++-v3/crossconfig.m4	2012-05-02 15:34:31.000000000 -0400
+++ gcc-4.8.2-patched/libstdc++-v3/crossconfig.m4	2013-12-11 21:38:58.992779424 -0500
@@ -247,6 +247,13 @@ case "${host}" in
     GLIBCXX_CHECK_MATH_SUPPORT
     GLIBCXX_CHECK_STDLIB_SUPPORT
     ;;
+  *-ebbrt*)
+    AC_CHECK_HEADERS([sys/types.h locale.h float.h])
+    GLIBCXX_CHECK_BUILTIN_MATH_SUPPORT
+    GLIBCXX_CHECK_COMPLEX_MATH_SUPPORT
+    GLIBCXX_CHECK_STDLIB_SUPPORT
+    GLIBCXX_CHECK_LINKER_FEATURES
+    ;;
   *-vxworks)
     AC_DEFINE(HAVE_ACOSF)
     AC_DEFINE(HAVE_ASINF)
